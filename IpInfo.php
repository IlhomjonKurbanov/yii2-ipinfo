<?php

/**
 * @copyright Copyright &copy; Kartik Visweswaran, Krajee.com, 2015
 * @package   yii2-ipinfo
 * @version   1.0.0
 */

namespace kartik\ipinfo;

use Yii;
use yii\helpers\Html;
use yii\helpers\ArrayHelper;
use yii\helpers\Json;
use kartik\base\Widget;
use kartik\popover\PopoverX;

/**
 * IP Info widget for Yii2 with ability to display country flag and
 * geo position info. Uses the API from hostip.info to parse IP info.
 *
 * @see http://hostip.info
 *
 * @author Kartik Visweswaran <kartikv2@gmail.com>
 * @since 1.0
 */
class IpInfo extends Widget
{
    const API_HOME = 'http://www.hostip.info/';
    const API_INFO = 'http://api.hostip.info/get_json.php';
    const API_FLAG = 'http://api.hostip.info/flag.php';

    /**
     * @var string the ip address
     */
    public $ip;

    /**
     * @var bool whether to show flag
     */
    public $showFlag = true;

    /**
     * @var bool whether to display position coordinates
     */
    public $showPosition = true;

    /**
     * @var bool whether to show details in a popover on click of flag.
     * If set to false, the results will be rendered inline.
     */
    public $showPopover = true;

    /**
     * @var bool whether to display and return raw json. If this is set
     * to true, then all other options before will be ignored and a raw
     * json returned.
     */
    public $showJson = false;

    /**
     * @var bool whether to display credits and link to hostip.info.
     */
    public $showCredits = true;

    /**
     * @var array the message to be shown when no data is found. Defaults to:
     * `No data found for IP address {ip}`.
     */
    public $noData;

    /**
     * @var array the column fields to be display as details. Each item in this
     * array must correspond to the field `key` for each record in the JSON output.
     * Note that the fields will be displayed in the same order as you set it here.
     * If not set, the translated names are autogenerated (see [[_defaultFields]]).
     */
    public $fields = [];

    /**
     * @var array the widget configuration settings for `kartik\popover\PopoverX`
     * widget that will show the details on hover.
     */
    public $popoverOptions = [];

    /**
     * @var array the HTML attributes for the flag image.
     */
    public $flagOptions = ['style' => 'height:18px'];

    /**
     * @var array the header title for content shown in the popover.
     * Defaults to `IP Position Details`
     */
    public $contentHeader;

    /**
     * @var array the icon shown before the header title for content in the popover
     */
    public $contentHeaderIcon = '<i class="glyphicon glyphicon-map-marker"></i> ';

    /**
     * @var array the HTML attributes for the ip info content table container.
     */
    public $contentOptions = ['class' => 'table'];

    /**
     * @var array the HTML attributes for the credits. The following
     * special tags are recognized:
     * `label`: string, the `label` for the credits link. Defaults to
     *  'Revalidate IP info'.
     */
    public $creditsOptions = ['class' => 'btn btn-xs center-block', 'target' => '_blank'];

    /**
     * @var array the HTML attributes for the no data text. The following
     * special tags are recognized:
     * `tag`: string, the `tag` in which the content will be rendered.
     *  Defaults to `div`.
     */
    public $noDataOptions = ['class' => 'alert alert-danger text-center'];

    /**
     * @var array the HTML attributes for the widget container. The following
     * special tags are recognized:
     * `tag`: string, the `tag` in which the content will be rendered.
     *  Defaults to `span`.
     */
    public $options = [];

    /**
     * @var array the default field keys and labels setting (@see `initOptions` method)
     */
    protected $_defaultFields = [];

    /**
     * @inheritdoc
     */
    public function run()
    {
        $this->initOptions();
        echo $this->renderWidget();
    }

    /**
     * Initialize widget options
     */
    protected function initOptions()
    {
        $this->_msgCat = 'kvip';
        $this->initI18N();
        $this->_defaultFields = [
            'country_code' => Yii::t('kvip', 'Country Code'),
            'country_name' => Yii::t('kvip', 'Country Name'),
            'city' => Yii::t('kvip', 'City'),
            'ip' => Yii::t('kvip', 'IP Address'),
            'lat' => Yii::t('kvip', 'Latitude'),
            'lng' => Yii::t('kvip', 'Longitude')
        ];
    }

    /**
     * Renders the widget
     *
     * @return string
     */
    protected function renderWidget()
    {
        $ip = $ipParam = $params = '';
        if (!empty($this->ip)) {
            $ip = Html::encode($this->ip);
            $ipParam = "?ip={$ip}";
        }
        if ($this->showPosition) {
            $params = $ipParam . (!empty($this->ip) ? '&position=true' : '?position=true');
        }
        $json = file_get_contents(self::API_INFO . $params);
        if ($this->showJson) {
            return $json;
        }
        $out = Json::decode($json);
        $tag = ArrayHelper::remove($this->options, 'tag', 'div');
        $noData = empty($this->noData) ? Yii::t('kvip', 'No data found for IP address {ip}.', [
            'ip' => '<pre style="margin:5px 0 0 0">' . $this->ip . '</pre>'
        ]) : $this->noData;
        $noData = Html::tag($tag, $noData, $this->noDataOptions);
        $credits = '';
        if ($this->showCredits) {
            $label = ArrayHelper::remove($this->creditsOptions, 'label', Yii::t('kvip', 'Revalidate IP info'));
            $credits = Html::a($label, self::API_HOME, $this->creditsOptions);
        }
        $content = '';
        if (is_array($out)) {
            $code = ArrayHelper::getValue($out, 'country_code', '');
            if (empty($code) || $code == 'XX') {
                $content = $noData . $credits;
            } else {
                $content = Html::beginTag('table', $this->contentOptions) . "\n";
                $fields = empty($this->fields) ? array_keys($this->_defaultFields) : $this->fields;
                foreach ($fields as $field) {
                    if (isset($out[$field])) {
                        $label = $this->_defaultFields[$field];
                        $value = $out[$field];
                        $content .= "<tr><th>{$label}</th><td>{$value}</td>\n";
                    }
                }
                $content .= "</table>\n{$credits}";
            }
        }
        $tag = ArrayHelper::remove($this->options, 'tag', 'span');
        $content = Html::tag($tag, $content, $this->options);
        if ($this->showFlag) {
            if (!isset($this->flagOptions['alt']) && !empty($ip)) {
                $this->flagOptions['alt'] = $ip;
            }
            $flag = Html::img(self::API_FLAG . $ipParam, $this->flagOptions);
            if ($this->showPopover) {
                $header = isset($this->contentHeader) ? $this->contentHeader : Yii::t('kvip', 'IP Position Details');
                $this->popoverOptions['header'] = $this->contentHeaderIcon . $header;
                if (!isset($this->popoverOptions['toggleButton']) && !isset($this->popoverOptions['toggleButton']['class'])) {
                    $this->popoverOptions['toggleButton']['class'] = 'btn btn-xs btn-link';
                }
                if (!isset($this->popoverOptions['toggleButton']['style'])) {
                    $this->popoverOptions['toggleButton']['style'] = 'margin:0';
                }
                $this->popoverOptions['toggleButton']['label'] = $flag;
                $this->popoverOptions['content'] = $content;
                $content = PopoverX::widget($this->popoverOptions);
            } else {
                $content = $flag . $content;
            }
        }
        return $content;
    }
}
